import numpy as np
import networkx as nx
import glob
import json
import scipy
import pandas as pd
from sklearn import svm
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.model_selection import train_test_split

np.random.seed(1)
malware_positions = glob.glob('/datasets/dsc180a-wi20-public/Malware/amd_data_smali/*/*/*')
benign_positions = glob.glob('../DSC180A/APKs/decompiled/*')
malware_positions = list(np.random.choice(malware_positions, 500, replace = False))

def get_class(file):
    """
    Return 1 if it is malware, 0 if benign
    """
    return int('dsc180a-wi20-public' in file)

def get_name(file):
    """
    Return name of the APP
    """
    return '-'.join(file.split('/')[-3:])

np.random.seed(5)
decompiled_apks = benign_positions + malware_positions
indices = np.random.choice(len(decompiled_apks), int(len(decompiled_apks)*0.8), replace = False)
train = [decompiled_apks[i] for i in indices]
# train = np.random.choice(decompiled_apks, int(len(decompiled_apks)*0.8), replace = False)
test = [apk for apk in decompiled_apks if apk not in train]

apk_names_train = [get_name(file) for file in train]
apk_classes_train = [get_class(file) for file in train]

apk_names_test = [get_name(file) for file in test]
apk_classes_test = [get_class(file) for file in test]

print(pd.Series(apk_classes_train).value_counts())
print(pd.Series(apk_classes_test).value_counts())

apk2idx_train = dict(zip(apk_names_train, range(len(apk_names_train))))
apk2idx_test = dict(zip(apk_names_test, range(len(apk_names_test))))


matrix_A_train = scipy.sparse.load_npz('../DSC180A/matrix_A_train_1000_app.npz')
matrix_B_train = scipy.sparse.load_npz('../DSC180A/matrix_B_train_1000_app.npz')

AAT = matrix_A_trai * matrix_A_train.T
AAT_np = (AAT > 0).toarray().astype(int)
G = nx.from_numpy_matrix(AAT_np)
nx.write_edgelist(G, "AAT_1000.edgelist")

ABA = matrix_A_train * matrix_B_train * matrix_A_train.T
ABA_np = (ABA > 0).toarray().astype(int)
G = nx.from_numpy_matrix(ABA_np)
nx.write_edgelist(G, "ABA_1000.edgelist")

# git clone https://github.com/aditya-grover/node2vec
# in node2vec directory, run:
# python src/main.py --input ../DSC180B/AAT_1000.edgelist --output emb/AAT_1000.emd
# python src/main.py --input ../DSC180B/ABA_1000.edgelist --output emb/ABA_1000.emd

def get_train_test_embed(filepath):
    embedding_index = {}
    with open(filepath, 'r') as f:
        for line in f.readlines()[1:]:
            values = line.split()
            idx = int(values[0])
            coefs = np.asarray(values[1:],dtype='float32')
            embedding_index[idx] = coefs
    apk2class_train = dict(zip(apk_names_train, apk_classes_train))
    X = [embedding_index[apk2idx_train[apk]] for apk in apk2idx_train if apk2idx_train[apk] in embedding_index]
    Y = [apk2class_train[apk] for apk in apk2idx_train if apk2idx_train[apk] in embedding_index]
    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test

X_train, X_test, y_train, y_test = get_train_test_embed('../node2vec/emb/AAT_1000.emd')
clf = svm.SVC()
clf.fit(X_train, y_train)
print(clf.score(X_train, y_train))
print(clf.score(X_test, y_test))

clf = RandomForestClassifier()
clf.fit(X_train, y_train)
print(clf.score(X_train, y_train))
print(clf.score(X_test, y_test))

clf = GradientBoostingClassifier()
clf.fit(X_train, y_train)
print(clf.score(X_train, y_train))
print(clf.score(X_test, y_test))

X_train, X_test, y_train, y_test = get_train_test_embed('../node2vec/emb/ABA_1000.emd')
clf = svm.SVC()
clf.fit(X_train, y_train)
print(clf.score(X_train, y_train))
print(clf.score(X_test, y_test))

clf = RandomForestClassifier()
clf.fit(X_train, y_train)
print(clf.score(X_train, y_train))
print(clf.score(X_test, y_test))

clf = GradientBoostingClassifier()
clf.fit(X_train, y_train)
print(clf.score(X_train, y_train))
print(clf.score(X_test, y_test))
